#!/bin/sh
# - runtime
# - nr_threads
# - fds
# - mode
# - ipc
# - iterations
# - loops
# - datasize

## Hackbench  is  both  a benchmark and a stress test for the Linux kernel scheduler.
## It's main job is to create a specified number  of  pairs  of schedulable entities
## (either threads or traditional processes) which communicate via either sockets or
## pipes and time how long it takes  for each pair to send data back and forth.

. $LKP_SRC/lib/reproduce-log.sh
. $LKP_SRC/lib/run.sh

[ "$ipc" = 'pipe' ] && ipc_option='--pipe'

[ -n "$runtime" ] || runtime=600

# Default datasize for hackbench is 100
[ -n "$datasize" ] || datasize=100

# Default fds for hackbench is 20 in each group
[ -n "$fds" ] || fds=20

set_env()
{
	tasks=$((nr_threads * 2 * fds))

	# increase permitted open file number
	ulimit -n $((tasks + 2048))

	def_pid_max=32768
	[ "$tasks" -gt $((def_pid_max / 2)) ] && {
		sysctl -w kernel.pid_max=$((tasks * 2))
		sysctl -w kernel.threads-max=$((tasks * 2))
		sysctl -w vm.max_map_count=$((tasks * 100))
	}
}

set_loops()
{
	loops=$(( 30000 * nr_cpu / nr_threads ))
}

run_hackbench()
{
	# args: groups number, mode [process/thread], times
	log_cmd hackbench -g $nr_threads -f $fds --$mode $ipc_option -l $loops -s $datasize
}

run_for_time()
{
	start_time=$(date +%s)
	while :
	do
		run_hackbench
		now=$(date +%s)
		[ $((now - start_time)) -gt "$runtime" ] && break
	done
}

run_for_iterations()
{
	for i in $(seq 1 $iterations); do
		echo "Iterations: $i"
		run_hackbench
	done
}

prepare_exec_path

set_env
[ -n "$loops" ] || set_loops

if [ -n "$iterations" ]; then
	run_for_iterations
else
	run_for_time
fi
