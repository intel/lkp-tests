pkgname=ltp
pkgver=git
pkgrel=1
url='https://github.com/linux-test-project/ltp'
arch=('i386' 'x86_64' 'aarch64')
license=('GPL')
options=('!strip')
source=('https://github.com/linux-test-project/ltp.git')
md5sums=('SKIP')

. $LKP_SRC/lib/tests/ltp.sh
. $LKP_SRC/lib/install.sh
. $LKP_SRC/lib/tests/pkgbuild.sh

prepare()
{
	prepare_benchmark_path
}

build_ltp()
{
	make autotools
	./configure --prefix=$benchmark_path
	make
}

build()
{
	split_syscalls_tests

	cd_src_pkg_dir

	echo build_ltp
	git log -1
	build_ltp
}

hide()
{
	mv $1 .$1
}

split_syscalls_tests()
{
	echo split_syscalls_tests

	cd_src_pkg_dir $pkgname/runtest

	grep "^setsockopt06" syscalls >> syscalls-setsockopt06
	# need 2 numa node
	grep -Ee "^(mbind|move_pages|migrate_pages|set_mempolicy)" syscalls >> syscalls-numa

	# delete ioprio_set03 test temporarily since new header files from linux-next are required to compile it.
	sed -i "/ioprio_set03/d" syscalls

	# standalone
	standalone_file=$(get_pkg_dir $pkgname)/addon/tests/syscalls-standalone
	while read line
	do
		grep -q "^$line$" syscalls || {
			echo "standalone test \"$line\" is not found in syscalls"
			return 1
		}
		echo $line > ./"${line//[[:blank:]]/.}"
	done < <(cat $standalone_file | grep -v '^#')

	grep -v -f syscalls-setsockopt06 -f syscalls-numa syscalls -f $standalone_file > syscalls-rest
	$LKP_SRC/tools/split-tests syscalls-rest 8 syscalls-
	hide syscalls-rest
	hide syscalls
}

split_tests()
{
	echo split_tests

	cd $benchmark_path/runtest

	$LKP_SRC/tools/split-tests dio 4 dio-
	hide dio

	$LKP_SRC/tools/split-tests fs_readonly 4 fs_readonly-
	hide fs_readonly

	$LKP_SRC/tools/split-tests fs 4 fs-
	hide fs

	$LKP_SRC/tools/split-tests crashme 2 crashme-
	hide crashme

	$LKP_SRC/tools/split-tests scsi_debug.part1 4 scsi_debug.part1-
	hide scsi_debug.part1

	$LKP_SRC/tools/split-tests ltp-aiodio.part2 4 ltp-aiodio.part2-
	hide ltp-aiodio.part2

	# DOR tests are slow and may cost hundreds of seconds
	# $ grep DOR ltp-aiodio.part4
	# DOR000 dio_read -n 1 -i 100 -r 512k -w 512k -s 32M
	# DOR001 dio_read -n 10 -i 30 -r 512k -w 512k -s 32M
	# DOR002 dio_read -n 20 -i 15 -r 512k -w 512k -s 32M
	# DOR003 dio_read -n 100 -i 4 -r 512k -w 512k -s 32M
	# split out DOR tests as standalone
	grep DOR ltp-aiodio.part4 | while read line
	do
		local dor_test=$(echo $line | cut -d' ' -f1)
		echo "$line" > ltp-aiodio.part4-$dor_test
	done
	# delete DOR tests from part4
	sed -i "/DOR/d" ltp-aiodio.part4

	# remaining tests of ltp-aiodio.part4 may costs up to 1500s
	# split to two groups
	$LKP_SRC/tools/split-tests ltp-aiodio.part4 4 ltp-aiodio.part4-
	hide ltp-aiodio.part4

	$LKP_SRC/tools/split-tests cve 8 cve-
	hide cve

	# net_stress.appl
	grep "ssh" net_stress.appl > net_stress.appl-ssh
	grep "dns" net_stress.appl > net_stress.appl-dns
	grep "http" net_stress.appl > net_stress.appl-http
	grep "ftp" net_stress.appl > net_stress.appl-ftp
	grep -v -e ^# -e ^$ -e ssh -e dns -e http -e ftp net_stress.appl && return 1
	hide net_stress.appl

	# syscalls-ipc
	grep "msgstress" syscalls-ipc > syscalls-ipc-msgstress
	grep -v "msgstress" syscalls-ipc > syscalls-ipc-00
	hide syscalls-ipc

	# mm
	grep -e oom mm > mm-oom
	grep -e min_free_kbytes mm > mm-min_free_kbytes
	grep -e mtest06_3 mm > mm-mtest06_3
	grep -e ksm06 -e ksm04 -e ksm02 -e cpuset01 mm > mm-numa
	grep -v -e oom -e min_free_kbytes -e mtest06_3 -e ksm06 -e ksm04 -e ksm02 -e cpuset01 mm > mm-00
	hide mm

	# kernel_misc
	# zram01 costs more than 28min
	grep -e zram01 kernel_misc > kernel_misc-zram01
	sed -i "/zram01/d" kernel_misc
}

package()
{
	cd_src_pkg_dir

	make install

	pack_contents testcases/commands/tpm-tools/tpmtoken/tpmtoken_import/tpmtoken_import_openssl.cnf \
		testcases/commands/tpm-tools/tpmtoken/tpmtoken_protect/tpmtoken_protect_data.txt \
		$benchmark_path/testcases/bin/

	# cp file for rebuild dummy_del_mod*.ko
	pack_contents testcases/kernel/syscalls/delete_module/* $benchmark_path/testcases/kernel/syscalls/delete_module

	split_tests
}
